xml

<books>
    <book>
        <title>The Great Gatsby</title>
        <author>F. Scott Fitzgerald</author>
        <year>1925</year>
        <price>10.99</price>
    </book>
    <book>
        <title>To Kill a Mockingbird</title>
        <author>Harper Lee</author>
        <year>1960</year>
        <price>8.99</price>
    </book>
    <book>
        <title>1984</title>
        <author>George Orwell</author>
        <year>1949</year>
        <price>6.99</price>
    </book>
    <book>
        <title>Pride and Prejudice</title>
        <author>Jane Austen</author>
        <year>1813</year>
        <price>7.99</price>
    </book>
</books>


html


<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Book Details</title>
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
    <script>
        $(document).ready(function () {
            $("select").change(function () {
                var book = $(this).val();

                $.ajax({
                    url: "book_details.xml",
                    dataType: "xml",
                    success: function (xml) {
                        var found = false;
                        $(xml).find("book").each(function () {
                            var title = $(this).find("title").text();
                            if (title === book) {
                                var author = $(this).find("author").text();
                                var year = $(this).find("year").text();
                                var price = $(this).find("price").text();

                                $("#details").html(
                                    "<p><strong>Author:</strong> " + author + "<br>" +
                                    "<strong>Year:</strong> " + year + "<br>" +
                                    "<strong>Price:</strong> $" + price + "</p>"
                                );
                                found = true;
                            }
                        });

                        if (!found) {
                            $("#details").html("<p>Please select a valid book.</p>");
                        }
                    },
                    error: function () {
                        $("#details").html("<p>Error loading book details.</p>");
                    }
                });
            });
        });
    </script>
</head>
<body>
    <h2>Select a Book</h2>
    <select>
        <option value="">-- Select a Book --</option>
        <option value="The Great Gatsby">The Great Gatsby</option>
        <option value="To Kill a Mockingbird">To Kill a Mockingbird</option>
        <option value="1984">1984</option>
        <option value="Pride and Prejudice">Pride and Prejudice</option>
    </select>
    <div id="details"></div>
</body>
</html>


2)

import re
import nltk
from nltk.corpus import stopwords
from nltk.tokenize import sent_tokenize, word_tokenize
from heapq import nlargest

# Download required NLTK resources
nltk.download('punkt')
nltk.download('stopwords')

# Sample text paragraph
text = """Natural language processing (NLP) is a subfield of linguistics, 
computer science, information engineering, and artificial intelligence concerned 
with the interactions between computers and human languages, in particular, 
how to program computers to process and analyze large amounts of natural language data. 
Challenges in natural language processing frequently involve speech recognition, 
natural language understanding, and natural language generation. 
The history of natural language processing generally started in the 1950s, 
although work can be found from earlier periods."""

# Remove special characters and digits
text = re.sub(r'[^a-zA-Z. ]', '', text)

# Tokenize the text into sentences
sentences = sent_tokenize(text)

# Tokenize each sentence into words and remove stopwords
stop_words = set(stopwords.words('english'))
words = []

for sentence in sentences:
    words.extend(word_tokenize(sentence))

# Convert to lowercase and filter out stopwords
words = [word.lower() for word in words if word.lower() not in stop_words]

# Calculate word frequency
word_freq = nltk.FreqDist(words)

# Calculate sentence scores based on word frequency
sentence_scores = {}

for sentence in sentences:
    for word in word_tokenize(sentence.lower()):
        if word in word_freq:
            if len(sentence.split()) < 30:  # Consider only short sentences for summary
                if sentence not in sentence_scores:
                    sentence_scores[sentence] = word_freq[word]
                else:
                    sentence_scores[sentence] += word_freq[word]

# Generate summary by selecting the top 3 sentences with the highest scores
summary_sentences = nlargest(3, sentence_scores, key=sentence_scores.get)
summary = " ".join(summary_sentences)

# Print the summary
print(summary)
