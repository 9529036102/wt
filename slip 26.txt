Q.1)

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Employee Details</title>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
</head>
<body>
    <h2>Select an Employee</h2>
    <select id="employee-list">
        <option value="">Select an employee</option>
        <!-- Populate this dropdown with employee names using PHP -->
    </select>

    <div id="employee-details">
        <!-- Employee details will be displayed here -->
    </div>

    <script src="script.js"></script>
</body>
</html>



$(document).ready(function(){
    // Add event listener to the select dropdown
    $('#employee-list').change(function(){
        var selectedEmployee = $(this).val();
        if (selectedEmployee !== "") {
            // Make an AJAX request to fetch employee details
            $.ajax({
                url: 'empdetails.php',
                type: 'POST',
                data: { employeeName: selectedEmployee },
                dataType: 'json',
                success: function(response) {
                    // Parse the JSON response and display employee details
                    var detailsHtml = `<strong>Employee Name:</strong> ${response.ename}<br>
                                       <strong>Designation:</strong> ${response.designation}<br>
                                       <strong>Salary:</strong> ${response.salary}`;
                    $('#employee-details').html(detailsHtml);
                },
                error: function(xhr, status, error) {
                    console.log('Error:', error);
                }
            });
        } else {
            $('#employee-details').html('');
        }
    });

    // Populate the employee dropdown from the database
    $.ajax({
        url: 'getEmployees.php', // A separate PHP file to fetch employee names
        type: 'GET',
        dataType: 'json',
        success: function(response) {
            response.forEach(function(emp) {
                $('#employee-list').append(`<option value="${emp.ename}">${emp.ename}</option>`);
            });
        },
        error: function(xhr, status, error) {
            console.log('Error:', error);
        }
    });
});





<?php
// Establish database connection
$conn = pg_connect("host=localhost dbname=database_name user=username password=password");

if (!$conn) {
    die('Connection failed: ' . pg_last_error());
}

// Get the selected employee name from AJAX request
$employeeName = $_POST['employeeName'];

// Prevent SQL injection
$employeeName = pg_escape_string($conn, $employeeName);

// Query the EMP table for the details of the selected employee
$sql = "SELECT * FROM EMP WHERE ename = '$employeeName'";
$result = pg_query($conn, $sql);

if (pg_num_rows($result) > 0) {
    // Build a JSON object with employee details
    $employee = pg_fetch_assoc($result);
    $response = array(
        'ename' => $employee['ename'],
        'designation' => $employee['designation'],
        'salary' => $employee['salary']
    );
    echo json_encode($response);
} else {
    echo json_encode(['error' => 'Employee not found']);
}

// Close database connection
pg_close($conn);
?>

Q.2)

import re
from nltk.tokenize import sent_tokenize
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity

# Text to summarize
text = """Hello all, Welcome to Python Programming Academy. 
Python Programming Academy is a nice platform to learn new programming skills. 
It is difficult to get enrolled in this Academy."""

# Preprocess the text to remove special characters and digits
preprocessed_text = re.sub(r'[^a-zA-Z\s]', '', text)

# Tokenize the preprocessed text into sentences
sentences = sent_tokenize(preprocessed_text)

# Calculate the importance score of each sentence using TF-IDF
vectorizer = TfidfVectorizer()
tfidf_matrix = vectorizer.fit_transform(sentences)
similarity_matrix = cosine_similarity(tfidf_matrix, tfidf_matrix)

# Select top N sentences based on their importance score
N = 2
sentence_scores = similarity_matrix.sum(axis=1)  # Compute sentence scores
top_sentences_indices = sorted(range(len(sentence_scores)), key=lambda i: sentence_scores[i], reverse=True)[:N]

# Concatenate the top sentences to form the summary
summary = ' '.join([sentences[i] for i in sorted(top_sentences_indices)])

print("Summary:", summary)
