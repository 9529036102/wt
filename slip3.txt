<?php
// Start session
session_start();

// Check if login form has been submitted
if (isset($_POST['submit'])) {
    // Get username and password input from user
    $username = $_POST['username'];
    $password = $_POST['password'];

    // Set correct username and password
    $correct_username = 'myusername';
    $correct_password = 'mypassword';

    // Check if entered username and password are correct
    if ($username == $correct_username && $password == $correct_password) {
        // Set session variable to mark user as logged in
        $_SESSION['loggedin'] = true;
        // Redirect user to welcome page
        header('Location: welcome.php');
        exit();
    } else {
        // Decrement login attempts
        if (isset($_SESSION['attempts'])) {
            $_SESSION['attempts']--;
        } else {
            $_SESSION['attempts'] = 2; // Max 3 attempts (2 remaining after first failure)
        }

        // Display error message if maximum login attempts exceeded
        if ($_SESSION['attempts'] <= 0) {
            echo "Maximum login attempts exceeded. Please try again later.";
        } else {
            // Display error message with remaining attempts
            echo "Invalid username or password. You have " . $_SESSION['attempts'] . " attempt(s) left.";
        }
    }
}
?>

<!-- HTML form for user input -->
<!DOCTYPE html>
<html>
<head>
    <title>Login Form</title>
</head>
<body>
    <form method="post" action="">
        <label for="username">Username:</label>
        <input type="text" id="username" name="username" required><br><br>

        <label for="password">Password:</label>
        <input type="password" id="password" name="password" required><br><br>

        <input type="submit" name="submit" value="Log In">
    </form>
</body>
</html>


Q2


# Import required libraries
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.preprocessing import LabelEncoder

# Create the dataset
data = {
    'UserID': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
    'Gender': ['Male', 'Male', 'Female', 'Female', 'Male', 'Male', 'Female', 'Female', 'Male', 'Female'],
    'Age': [19, 35, 26, 27, 19, 27, 32, 25, 33, 45],
    'EstimatedSalary': [19000, 20000, 43000, 57000, 76000, 58000, 82000, 32000, 69000, 65000],
    'Purchased': [0, 0, 0, 1, 1, 0, 1, 0, 1, 1]
}

# Create a DataFrame
df = pd.DataFrame(data)

# Encode the 'Gender' column (Male -> 1, Female -> 0)
le = LabelEncoder()
df['Gender'] = le.fit_transform(df['Gender'])

# Identify the independent (X) and target (Y) variables
X = df.iloc[:, 1:4].values  # Gender, Age, EstimatedSalary
y = df.iloc[:, 4].values    # Purchased

# Split the data into training and testing sets (70% training, 30% testing)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=0)

# Build a logistic regression model
lr = LogisticRegression(random_state=0)
lr.fit(X_train, y_train)

# Predict a single observation
observation = [[0, 30, 87000]]  # Female, Age 30, Salary 87000
prediction = lr.predict(observation)
print("Prediction for a single observation:", prediction[0])

# Predict multiple observations
observations = [
    [0, 30, 87000],  # Female, Age 30, Salary 87000
    [1, 50, 45000],  # Male, Age 50, Salary 45000
    [1, 22, 30000]   # Male, Age 22, Salary 30000
]
predictions = lr.predict(observations)
print("Predictions for multiple observations:", predictions)
