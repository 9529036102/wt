<?php
// Load the XML file
$xml = new DOMDocument();
$xml->load('Movie.xml');

// Get all the movie nodes
$movies = $xml->getElementsByTagName('MovieInfo');

// Loop through each movie node and print the movie title and actor name
foreach ($movies as $movie) {
    echo "Movie Title: " . $movie->getElementsByTagName('MovieTitle')->item(0)->textContent . ", ";
    echo "Actor Name: " . $movie->getElementsByTagName('ActorName')->item(0)->textContent . "<br>";
}
?>


<?xml version="1.0" encoding="UTF-8"?>
<MovieList>
    <MovieInfo>
        <MovieNo>1</MovieNo>
        <MovieTitle>The Shawshank Redemption</MovieTitle>
        <ActorName>Tim Robbins</ActorName>
        <ReleaseYear>1994</ReleaseYear>
    </MovieInfo>
    <MovieInfo>
        <MovieNo>2</MovieNo>
        <MovieTitle>The Godfather</MovieTitle>
        <ActorName>Marlon Brando</ActorName>
        <ReleaseYear>1972</ReleaseYear>
    </MovieInfo>
    <MovieInfo>
        <MovieNo>3</MovieNo>
        <MovieTitle>The Dark Knight</MovieTitle>
        <ActorName>Christian Bale</ActorName>
        <ReleaseYear>2008</ReleaseYear>
    </MovieInfo>
    <MovieInfo>
        <MovieNo>4</MovieNo>
        <MovieTitle>The Godfather: Part II</MovieTitle>
        <ActorName>Al Pacino</ActorName>
        <ReleaseYear>1974</ReleaseYear>
    </MovieInfo>
    <MovieInfo>
        <MovieNo>5</MovieNo>
        <MovieTitle>12 Angry Men</MovieTitle>
        <ActorName>Henry Fonda</ActorName>
        <ReleaseYear>1957</ReleaseYear>
    </MovieInfo>
</MovieList>

Q2

import pandas as pd
from mlxtend.preprocessing import TransactionEncoder
from mlxtend.frequent_patterns import apriori, association_rules

# Read the dataset
df = pd.read_csv('Market_Basket_Optimisation.csv', header=None)

# Convert the dataset into a list of transactions
transactions = df.apply(lambda row: [item for item in row if pd.notna(item)], axis=1).tolist()

# Convert categorical values to numeric using one-hot encoding
te = TransactionEncoder()
te_ary = te.fit(transactions).transform(transactions)
df_encoded = pd.DataFrame(te_ary, columns=te.columns_)

# Generate frequent itemsets using Apriori algorithm
frequent_itemsets = apriori(df_encoded, min_support=0.01, use_colnames=True)

# Generate association rules from frequent itemsets
rules = association_rules(frequent_itemsets, metric="lift", min_threshold=1)

# Display information
print("Original Dataset (First 5 Rows of Encoded DataFrame):\n", df_encoded.head())
print("\nFrequent Itemsets:\n", frequent_itemsets)
print("\nAssociation Rules:\n", rules)
